#pragma once

#include <QDialog>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QGridLayout>
#include <QLabel>
#include <QComboBox>
#include <QListWidget>
#include <QPushButton>
#include <QLineEdit>
#include <QGroupBox>
#include <QCheckBox>
#include <QSpinBox>
#include <QMessageBox>
#include "lupine/localization/LocalizationManager.h"

// Forward declarations
namespace Lupine {
    class LocalizationManager;
}

/**
 * @brief Dialog for configuring localization settings
 * 
 * This dialog allows users to:
 * - Set the default locale
 * - Add and remove supported locales
 * - Configure localization system settings
 * - Import/export localization data
 */
class LocalizationSettingsDialog : public QDialog {
    Q_OBJECT

public:
    explicit LocalizationSettingsDialog(QWidget* parent = nullptr);
    ~LocalizationSettingsDialog();

protected:
    void closeEvent(QCloseEvent* event) override;

private slots:
    // Locale management
    void onAddLocale();
    void onRemoveLocale();
    void onEditLocale();
    void onLocaleSelectionChanged();
    void onDefaultLocaleChanged();
    
    // File operations
    void onImportLocalization();
    void onExportLocalization();
    void onResetToDefaults();
    
    // Dialog buttons
    void onOkClicked();
    void onCancelClicked();
    void onApplyClicked();

private:
    void setupUI();
    void setupLocaleManagement();
    void setupSettings();
    void setupFileOperations();
    void setupDialogButtons();
    
    void refreshLocaleList();
    void refreshDefaultLocaleCombo();
    void loadSettings();
    void saveSettings();
    void applySettings();
    
    bool validateSettings();
    void showAddLocaleDialog();
    void showEditLocaleDialog(const Lupine::Locale& locale);
    
    // UI Components
    QVBoxLayout* m_mainLayout;
    
    // Locale Management Group
    QGroupBox* m_localeGroup;
    QVBoxLayout* m_localeLayout;
    QHBoxLayout* m_localeButtonLayout;
    QListWidget* m_localeList;
    QPushButton* m_addLocaleButton;
    QPushButton* m_removeLocaleButton;
    QPushButton* m_editLocaleButton;
    
    // Settings Group
    QGroupBox* m_settingsGroup;
    QGridLayout* m_settingsLayout;
    QLabel* m_defaultLocaleLabel;
    QComboBox* m_defaultLocaleCombo;
    QCheckBox* m_autoDetectLocaleCheck;
    QCheckBox* m_fallbackToDefaultCheck;
    QCheckBox* m_showMissingKeysCheck;
    
    // File Operations Group
    QGroupBox* m_fileGroup;
    QHBoxLayout* m_fileLayout;
    QPushButton* m_importButton;
    QPushButton* m_exportButton;
    QPushButton* m_resetButton;
    
    // Dialog Buttons
    QHBoxLayout* m_buttonLayout;
    QPushButton* m_okButton;
    QPushButton* m_cancelButton;
    QPushButton* m_applyButton;
    
    // Data
    std::vector<Lupine::Locale> m_supportedLocales;
    Lupine::Locale m_defaultLocale;
    bool m_autoDetectLocale;
    bool m_fallbackToDefault;
    bool m_showMissingKeys;
    bool m_settingsChanged;
};

/**
 * @brief Dialog for adding/editing a locale
 */
class LocaleEditDialog : public QDialog {
    Q_OBJECT

public:
    explicit LocaleEditDialog(QWidget* parent = nullptr, const Lupine::Locale& locale = Lupine::Locale());

    Lupine::Locale getLocale() const;

private slots:
    void onLanguageCodeChanged();
    void onRegionCodeChanged();
    void onDisplayNameChanged();
    void onOkClicked();
    void onCancelClicked();

private:
    void setupUI();
    void updateDisplayName();
    bool validateInput();
    
    QVBoxLayout* m_mainLayout;
    QGridLayout* m_formLayout;
    
    QLabel* m_languageCodeLabel;
    QLineEdit* m_languageCodeEdit;
    QLabel* m_regionCodeLabel;
    QLineEdit* m_regionCodeEdit;
    QLabel* m_displayNameLabel;
    QLineEdit* m_displayNameEdit;
    QCheckBox* m_autoGenerateDisplayNameCheck;
    
    QHBoxLayout* m_buttonLayout;
    QPushButton* m_okButton;
    QPushButton* m_cancelButton;
    
    Lupine::Locale m_locale;
    bool m_autoGenerateDisplayName;
};
