name: Build and Test Lupine Engine

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Windows x64"
            os: windows-latest
            platform: windows
            triplet: x64-windows-static
            build_type: Release
            
          - name: "Linux x64"
            os: ubuntu-latest
            platform: linux
            triplet: x64-linux
            build_type: Release
            
          - name: "macOS x64"
            os: macos-13
            platform: macos
            triplet: x64-osx
            build_type: Release
            
          - name: "macOS ARM64"
            os: macos-latest
            platform: macos
            triplet: arm64-osx
            build_type: Release

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          thirdparty
          ~/.cache/pip
          ~/vcpkg
          /usr/local/Homebrew
        key: ${{ runner.os }}-${{ matrix.triplet }}-deps-${{ hashFiles('scripts/setup_build_environment.py') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.triplet }}-deps-
          ${{ runner.os }}-deps-

    - name: Install system dependencies (Windows)
      if: matrix.platform == 'windows'
      run: |
        # Install Chocolatey packages
        choco install cmake git ninja -y

        # Install Python packages needed for aqtinstall
        python -m pip install --user --upgrade pip

        # Install Python development headers via vcpkg
        Write-Host "Installing Python development headers..."

        # Ensure Visual Studio is available
        Write-Host "Visual Studio installation check..."
        if (Get-Command "cl.exe" -ErrorAction SilentlyContinue) {
          Write-Host "Visual Studio compiler found"
        } else {
          Write-Host "Installing Visual Studio Build Tools..."
          choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows10SDK.19041" -y
        }

        # Verify Python is available
        Write-Host "Checking Python availability..."
        $pythonCmd = $null
        foreach ($py in @("python", "python3", "py")) {
          if (Get-Command $py -ErrorAction SilentlyContinue) {
            $pythonCmd = $py
            Write-Host "Found Python: $py"
            break
          }
        }

        if (-not $pythonCmd) {
          Write-Host "Installing Python..."
          choco install python -y
          $pythonCmd = "python"
        }

        # Run setup script (will use precompiled libraries for speed)
        Write-Host "Running Lupine Engine setup script..."
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Python version: $(&$pythonCmd --version)"
        Write-Host "Files in directory:"
        Get-ChildItem -Name

        if (Test-Path "scripts\setup_build_environment.py") {
          Write-Host "Running setup script..."
          & $pythonCmd scripts\setup_build_environment.py --dev-only
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Setup script failed, but continuing..."
          }

          # Verify setup
          Write-Host "Verifying setup..."
          & $pythonCmd scripts\setup_build_environment.py --verify-only
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Verification failed, but continuing..."
          }
        } else {
          Write-Host "scripts\setup_build_environment.py not found!"
          Write-Host "Available Python files:"
          Get-ChildItem -Recurse -Filter "*.py" | Select-Object -ExpandProperty Name
          exit 1
        }
      shell: powershell

    - name: Install system dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== Installing Linux Dependencies ==="
        sudo apt-get update

        # Install build essentials
        sudo apt-get install -y build-essential cmake ninja-build pkg-config git

        # Install development libraries (try to install what's available)
        sudo apt-get install -y \
          libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev libsdl2-mixer-dev \
          libassimp-dev liblua5.4-dev libyaml-cpp-dev \
          libpng-dev libjpeg-dev libfreetype-dev \
          zlib1g-dev libssl-dev libsqlite3-dev \
          libogg-dev libvorbis-dev libflac-dev libopus-dev \
          libx11-dev libxext-dev libxrender-dev libgl1-mesa-dev \
          libasound2-dev libpulse-dev libglm-dev || echo "Some packages failed to install, continuing..."

        # Install Python packages needed for aqtinstall
        python3 -m pip install --user --upgrade pip

        # Qt will be handled by the setup script using static installation

        # Install virtual display for testing
        sudo apt-get install -y xvfb

        # Run setup script
        echo "Running Lupine Engine setup script..."
        echo "Current directory: $(pwd)"
        echo "Python version: $(python3 --version)"
        echo "Files in directory: $(ls -la)"
        if [ -f "scripts/setup_build_environment.py" ]; then
          echo "Running setup script..."
          python3 scripts/setup_build_environment.py --force --dev-only
          if [ $? -ne 0 ]; then
            echo "Setup script failed, but continuing..."
          fi

          # Verify setup
          echo "Verifying setup..."
          python3 scripts/setup_build_environment.py --verify-only
          if [ $? -ne 0 ]; then
            echo "Verification failed, but continuing..."
          fi
        else
          echo "❌ scripts/setup_build_environment.py not found!"
          echo "Available Python files:"
          find . -name "*.py" -type f
          exit 1
        fi
        
    - name: Install system dependencies (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "=== Installing macOS Dependencies ==="

        # Ensure Xcode Command Line Tools are installed
        if ! xcode-select -p &> /dev/null; then
          echo "Installing Xcode Command Line Tools..."
          sudo xcode-select --install || true
          # Wait for installation to complete
          until xcode-select -p &> /dev/null; do
            sleep 5
          done
        fi

        # Update Homebrew
        brew update

        # Install core dependencies
        brew install cmake ninja pkg-config python3

        # Install Python packages needed for aqtinstall
        python3 -m pip install --user --upgrade pip

        # Install development libraries
        brew install \
          sdl2 sdl2_image sdl2_ttf sdl2_mixer \
          assimp bullet lua yaml-cpp spdlog \
          libpng jpeg freetype zlib openssl \
          libogg libvorbis flac opus mpg123 libsndfile

        # Install Qt6 for editor
        brew install qt6

        # Set up Qt environment
        echo "$(brew --prefix qt6)/bin" >> $GITHUB_PATH

        # Run setup script (will use precompiled libraries for speed)
        echo "Running Lupine Engine setup script..."
        echo "Current directory: $(pwd)"
        echo "Python version: $(python3 --version)"
        echo "Files in directory: $(ls -la)"
        if [ -f "scripts/setup_build_environment.py" ]; then
          echo "Running setup script..."
          python3 scripts/setup_build_environment.py --dev-only
          if [ $? -ne 0 ]; then
            echo "Setup script failed, but continuing..."
          fi

          # Verify setup
          echo "Verifying setup..."
          python3 scripts/setup_build_environment.py --verify-only
          if [ $? -ne 0 ]; then
            echo "Verification failed, but continuing..."
          fi
        else
          echo "❌ scripts/setup_build_environment.py not found!"
          echo "Available Python files:"
          find . -name "*.py" -type f
          exit 1
        fi

    - name: Configure CMake
      run: |
        echo "=== Configuring CMake ==="
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo "CMake version:"
        cmake --version

        # Platform-specific configuration
        CMAKE_ARGS="-B build -S . -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DLUPINE_ENABLE_EDITOR=ON -DLUPINE_ENABLE_EXPORT=ON"

        if [ "${{ matrix.platform }}" = "windows" ]; then
          CMAKE_ARGS="$CMAKE_ARGS -G \"Visual Studio 17 2022\" -A x64"
          # Add vcpkg toolchain if available
          if [ -f "thirdparty/vcpkg/scripts/buildsystems/vcpkg.cmake" ]; then
            CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_TOOLCHAIN_FILE=thirdparty/vcpkg/scripts/buildsystems/vcpkg.cmake"
            CMAKE_ARGS="$CMAKE_ARGS -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }}"
          fi
        elif [ "${{ matrix.platform }}" = "macos" ]; then
          if [ "${{ matrix.triplet }}" = "arm64-osx" ]; then
            CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_OSX_ARCHITECTURES=arm64"
          else
            CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_OSX_ARCHITECTURES=x86_64"
          fi
          CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15"
        fi

        # Platform config will be included automatically by CMakeLists.txt
        if [ -f "cmake/PlatformConfig.cmake" ]; then
          echo "[OK] Platform config available: cmake/PlatformConfig.cmake"
        else
          echo "[WARN] Platform config not found, using default configuration"
        fi

        echo "CMake command: cmake $CMAKE_ARGS"
        if ! eval "cmake $CMAKE_ARGS"; then
          echo "[ERROR] CMake configuration failed!"
          echo "Checking for CMake error logs..."
          if [ -f "build/CMakeFiles/CMakeError.log" ]; then
            echo "=== CMakeError.log ==="
            cat build/CMakeFiles/CMakeError.log
          fi
          if [ -f "build/CMakeFiles/CMakeOutput.log" ]; then
            echo "=== CMakeOutput.log ==="
            tail -50 build/CMakeFiles/CMakeOutput.log
          fi
          exit 1
        fi
      shell: bash

    - name: Build
      run: |
        echo "=== Building Project ==="
        if ! cmake --build build --config ${{ matrix.build_type }} --parallel; then
          echo "[ERROR] Build failed!"
          echo "Checking build directory contents..."
          ls -la build/ || true
          ls -la build/bin/ || true
          exit 1
        fi
        echo "[OK] Build completed successfully"
      shell: bash
      
    - name: Verify build outputs
      run: |
        echo "=== Build Output Verification ==="
        
        if [ "${{ matrix.platform }}" = "windows" ]; then
          EXE_EXT=".exe"
        else
          EXE_EXT=""
        fi
        
        # Check if runtime exists
        if [ -f "build/bin/lupine-runtime${EXE_EXT}" ]; then
          echo "[OK] lupine-runtime found"
          ls -la "build/bin/lupine-runtime${EXE_EXT}"
        else
          echo "[ERROR] lupine-runtime not found"
          exit 1
        fi

        # Check if editor exists
        if [ -f "build/bin/lupine-editor${EXE_EXT}" ]; then
          echo "[OK] lupine-editor found"
          ls -la "build/bin/lupine-editor${EXE_EXT}"
        else
          echo "[ERROR] lupine-editor not found"
          exit 1
        fi
        
        echo "=== All executables found ==="
      shell: bash

    - name: Test runtime execution
      timeout-minutes: 1
      run: |
        echo "=== Testing Runtime Execution ==="

        if [ "${{ matrix.platform }}" = "windows" ]; then
          EXE_EXT=".exe"
          TIMEOUT_CMD="timeout"
        else
          EXE_EXT=""
          TIMEOUT_CMD="timeout"
        fi

        # Make executable on Unix systems
        if [ "${{ matrix.platform }}" != "windows" ]; then
          chmod +x "./build/bin/lupine-runtime${EXE_EXT}"
        fi

        # Test runtime with timeout - try different approaches
        echo "Testing runtime executable..."

        # First try with --help flag
        if $TIMEOUT_CMD 25s ./build/bin/lupine-runtime${EXE_EXT} --help 2>/dev/null; then
          echo "[OK] Runtime responds to --help"
        elif $TIMEOUT_CMD 25s ./build/bin/lupine-runtime${EXE_EXT} --version 2>/dev/null; then
          echo "[OK] Runtime responds to --version"
        else
          echo "[WARN] Runtime doesn't respond to standard flags, testing basic execution..."
          # Just try to run it briefly
          $TIMEOUT_CMD 25s ./build/bin/lupine-runtime${EXE_EXT} 2>/dev/null || echo "Runtime executed (may have exited normally)"
        fi

        echo "Runtime test completed"
      shell: bash

    - name: Test editor execution
      timeout-minutes: 1
      run: |
        echo "=== Testing Editor Execution ==="

        if [ "${{ matrix.platform }}" = "windows" ]; then
          EXE_EXT=".exe"
          TIMEOUT_CMD="timeout"
        else
          EXE_EXT=""
          TIMEOUT_CMD="timeout"
        fi

        # Set up virtual display for Linux
        if [ "${{ matrix.platform }}" = "linux" ]; then
          echo "Setting up virtual display for Linux..."
          export DISPLAY=:99
          sudo Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          sleep 3
          echo "Virtual display started"
        fi

        # Make executable on Unix systems
        if [ "${{ matrix.platform }}" != "windows" ]; then
          chmod +x "./build/bin/lupine-editor${EXE_EXT}"
        fi

        # Test editor with timeout
        echo "Testing editor executable..."

        # First try with --help flag
        if $TIMEOUT_CMD 25s ./build/bin/lupine-editor${EXE_EXT} --help 2>/dev/null; then
          echo "[OK] Editor responds to --help"
        elif $TIMEOUT_CMD 25s ./build/bin/lupine-editor${EXE_EXT} --version 2>/dev/null; then
          echo "[OK] Editor responds to --version"
        else
          echo "[WARN] Editor doesn't respond to standard flags, testing basic execution..."
          # Just try to run it briefly
          $TIMEOUT_CMD 25s ./build/bin/lupine-editor${EXE_EXT} 2>/dev/null || echo "Editor executed (may have exited normally)"
        fi

        echo "Editor test completed"
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lupine-engine-${{ matrix.platform }}-${{ matrix.triplet }}
        path: |
          build/bin/
          build/lib/
        retention-days: 7

    - name: Upload logs on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-${{ matrix.platform }}-${{ matrix.triplet }}
        path: |
          build/CMakeFiles/CMakeOutput.log
          build/CMakeFiles/CMakeError.log
          build/**/*.log
        retention-days: 3

  # Summary job that depends on all build jobs
  build-summary:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "=== Build Summary ==="
        echo "Windows x64: ${{ needs.build-and-test.result }}"
        echo "Linux x64: ${{ needs.build-and-test.result }}"
        echo "macOS x64: ${{ needs.build-and-test.result }}"
        echo "macOS ARM64: ${{ needs.build-and-test.result }}"
        
        if [ "${{ needs.build-and-test.result }}" = "success" ]; then
          echo "[OK] All builds completed successfully!"
        else
          echo "[ERROR] Some builds failed. Check the individual job logs."
          exit 1
        fi
