name: Build and Publish Precompiled Libraries

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag for the release'
        required: true
        default: 'precompiled-libs-v1.0'
      force_rebuild:
        description: 'Force rebuild even if libraries exist'
        required: false
        default: false
        type: boolean
  schedule:
    # Run weekly on Sundays at 2 AM UTC to update libraries
    - cron: '0 2 * * 0'

jobs:
  build-precompiled-libs:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Windows x64"
            os: windows-latest
            platform: Windows
            vcpkg_triplet: x64-windows-static
            archive_ext: "zip"
            
          - name: "Linux x64"
            os: ubuntu-latest
            platform: Linux
            vcpkg_triplet: x64-linux
            archive_ext: "tar.gz"
            
          - name: "macOS x64"
            os: macos-13
            platform: Mac-OSX
            vcpkg_triplet: x64-osx
            archive_ext: "tar.gz"
            
          - name: "macOS ARM64"
            os: macos-latest
            platform: Mac-ARM64
            vcpkg_triplet: arm64-osx
            archive_ext: "tar.gz"

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          thirdparty/vcpkg
          ~/.cache/vcpkg
        key: vcpkg-${{ runner.os }}-${{ matrix.vcpkg_triplet }}-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          vcpkg-${{ runner.os }}-${{ matrix.vcpkg_triplet }}-
          vcpkg-${{ runner.os }}-

    - name: Setup build tools
      run: |
        echo "=== Setting up build tools for ${{ matrix.platform }} ==="
        
        if [ "${{ matrix.platform }}" = "Windows" ]; then
          choco install cmake ninja 7zip -y
        elif [ "${{ matrix.platform }}" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config curl zip
        else
          # macOS
          brew update
          brew install cmake ninja pkg-config
        fi
      shell: bash

    - name: Setup vcpkg
      run: |
        echo "=== Setting up vcpkg ==="
        
        if [ ! -d "thirdparty/vcpkg" ]; then
          echo "Cloning vcpkg..."
          git clone https://github.com/Microsoft/vcpkg.git thirdparty/vcpkg
        fi
        
        cd thirdparty/vcpkg
        
        if [ "${{ matrix.platform }}" = "Windows" ]; then
          ./bootstrap-vcpkg.bat
        else
          ./bootstrap-vcpkg.sh
        fi
        
        echo "vcpkg setup completed"
      shell: bash

    - name: Install core libraries
      run: |
        echo "=== Installing core libraries via vcpkg ==="
        
        cd thirdparty/vcpkg
        triplet="${{ matrix.vcpkg_triplet }}"
        
        # Core engine libraries
        echo "Installing SDL3 and related libraries..."
        ./vcpkg install sdl2:$triplet || echo "SDL2 failed, continuing..."
        ./vcpkg install sdl2-image:$triplet || echo "SDL2-image failed, continuing..."
        ./vcpkg install sdl2-mixer:$triplet || echo "SDL2-mixer failed, continuing..."
        ./vcpkg install sdl2-ttf:$triplet || echo "SDL2-ttf failed, continuing..."
        
        echo "Installing 3D and physics libraries..."
        ./vcpkg install assimp:$triplet || echo "Assimp failed, continuing..."
        ./vcpkg install box2d:$triplet || echo "Box2D failed, continuing..."
        ./vcpkg install bullet3:$triplet || echo "Bullet3 failed, continuing..."
        
        echo "Installing scripting and data libraries..."
        ./vcpkg install lua:$triplet || echo "Lua failed, continuing..."
        ./vcpkg install yaml-cpp:$triplet || echo "yaml-cpp failed, continuing..."
        ./vcpkg install pugixml:$triplet || echo "pugixml failed, continuing..."
        ./vcpkg install nlohmann-json:$triplet || echo "nlohmann-json failed, continuing..."
        
        echo "Installing utility libraries..."
        ./vcpkg install glad:$triplet || echo "glad failed, continuing..."
        ./vcpkg install spdlog:$triplet || echo "spdlog failed, continuing..."
        ./vcpkg install glm:$triplet || echo "glm failed, continuing..."
        ./vcpkg install stb:$triplet || echo "stb failed, continuing..."
        
        echo "Installing compression and crypto libraries..."
        ./vcpkg install bzip2:$triplet || echo "bzip2 failed, continuing..."
        ./vcpkg install lz4:$triplet || echo "lz4 failed, continuing..."
        ./vcpkg install openssl:$triplet || echo "openssl failed, continuing..."
        ./vcpkg install sqlite3:$triplet || echo "sqlite3 failed, continuing..."
        
        echo "Installing audio libraries..."
        ./vcpkg install libvorbis:$triplet || echo "libvorbis failed, continuing..."
        ./vcpkg install libogg:$triplet || echo "libogg failed, continuing..."
        ./vcpkg install libflac:$triplet || echo "libflac failed, continuing..."
        ./vcpkg install opus:$triplet || echo "opus failed, continuing..."
        ./vcpkg install libsndfile:$triplet || echo "libsndfile failed, continuing..."
        
        echo "Installing Qt6 for editor..."
        ./vcpkg install qtbase:$triplet || echo "Qt6 failed, continuing..."
        
        echo "Installing Python bindings..."
        ./vcpkg install pybind11:$triplet || echo "pybind11 failed, continuing..."
        
        echo "Core libraries installation completed"
      shell: bash

    - name: Package libraries
      run: |
        echo "=== Packaging libraries for ${{ matrix.platform }} ==="
        
        # Create package directory
        package_dir="lupine-libs-${{ matrix.platform }}"
        mkdir -p "$package_dir"
        
        # Copy vcpkg installed libraries
        if [ -d "thirdparty/vcpkg/installed/${{ matrix.vcpkg_triplet }}" ]; then
          cp -r "thirdparty/vcpkg/installed/${{ matrix.vcpkg_triplet }}"/* "$package_dir/"
        fi
        
        # Create archive
        archive_name="lupine-libs-${{ matrix.platform }}.tar.gz"
        
        if [ "${{ matrix.platform }}" = "Windows" ]; then
          7z a "lupine-libs-${{ matrix.platform }}.zip" "$package_dir"
          archive_name="lupine-libs-${{ matrix.platform }}.zip"
        else
          tar -czf "$archive_name" "$package_dir"
        fi
        
        echo "Package created: $archive_name"
        ls -la "$archive_name"
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: precompiled-libs-${{ matrix.platform }}
        path: |
          lupine-libs-${{ matrix.platform }}.*
        retention-days: 30

  create-release:
    needs: build-precompiled-libs
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version_tag || 'precompiled-libs-v1.0' }}
        name: Precompiled Libraries ${{ github.event.inputs.version_tag || 'v1.0' }}
        body: |
          Precompiled static libraries for Lupine Game Engine
          
          This release contains statically compiled libraries for all supported platforms:
          - Windows x64
          - Linux x64  
          - macOS x64
          - macOS ARM64
          
          Libraries included:
          - SDL2, SDL2-image, SDL2-mixer, SDL2-ttf
          - Assimp, Box2D, Bullet3
          - Lua, yaml-cpp, pugixml, nlohmann-json
          - glad, spdlog, glm, stb
          - bzip2, lz4, openssl, sqlite3
          - libvorbis, libogg, libflac, opus, libsndfile
          - Qt6 base, pybind11
          
          Download the appropriate package for your platform and extract to `thirdparty/` directory.
        files: |
          artifacts/**/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
