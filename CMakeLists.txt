cmake_minimum_required(VERSION 3.20)
project(LupineEngine VERSION 1.0.0 LANGUAGES CXX)

#--- Load Platform Configuration ---
# Include platform-specific configuration generated by setup script
set(PLATFORM_CONFIG_FILE "${CMAKE_CURRENT_SOURCE_DIR}/cmake/PlatformConfig.cmake")
if(EXISTS "${PLATFORM_CONFIG_FILE}")
  # Check if the platform config matches current system
  if(WIN32)
    set(EXPECTED_PLATFORM "WINDOWS")
  elseif(APPLE)
    set(EXPECTED_PLATFORM "MACOS")
  elseif(UNIX)
    set(EXPECTED_PLATFORM "LINUX")
  endif()

  # Read the platform config to check if it matches
  file(READ "${PLATFORM_CONFIG_FILE}" PLATFORM_CONFIG_CONTENT)
  if(PLATFORM_CONFIG_CONTENT MATCHES "set\\(LUPINE_PLATFORM \"${EXPECTED_PLATFORM}\"\\)")
    include("${PLATFORM_CONFIG_FILE}")
    message(STATUS "Loaded platform configuration: ${PLATFORM_CONFIG_FILE}")
  else()
    message(WARNING "Platform configuration exists but is for wrong platform. Skipping.")
  endif()
else()
  message(WARNING "Platform configuration not found. Using default configuration.")
endif()

#--- C++ Standard & Build Type ---
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type" FORCE)
endif()

# Include custom CMake modules early
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
include(FindQt6Robust)

#--- vcpkg Integration (after project() call) ---
# Handle vcpkg toolchain if not already set via command line
if(NOT CMAKE_TOOLCHAIN_FILE AND DEFINED LUPINE_VCPKG_TOOLCHAIN_FILE)
  if(EXISTS "${LUPINE_VCPKG_TOOLCHAIN_FILE}")
    set(CMAKE_TOOLCHAIN_FILE "${LUPINE_VCPKG_TOOLCHAIN_FILE}" CACHE STRING "vcpkg toolchain file")
    message(STATUS "Setting vcpkg toolchain: ${CMAKE_TOOLCHAIN_FILE}")
  endif()
endif()

#--- Enhanced Platform Detection ---
if(WIN32)
  set(PLATFORM_NAME "Windows")
  set(PLATFORM_TRIPLET "x64-windows-static")
elseif(APPLE)
  if(CMAKE_OSX_ARCHITECTURES MATCHES "arm64" OR CMAKE_SYSTEM_PROCESSOR MATCHES "arm64")
    set(PLATFORM_NAME "Mac-ARM64")
    set(PLATFORM_TRIPLET "arm64-osx")
  else()
    set(PLATFORM_NAME "Mac-OSX")
    set(PLATFORM_TRIPLET "x64-osx")
  endif()
elseif(UNIX)
  set(PLATFORM_NAME "Linux")
  set(PLATFORM_TRIPLET "x64-linux")
else()
  message(FATAL_ERROR "Unsupported platform")
endif()

#--- Compiler Flags ---
if(MSVC)
  set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
  add_compile_options(/Zc:__cplusplus /permissive- /W4)
  # Enable parallel compilation
  add_compile_options(/MP)
else()
  add_compile_options(-Wall -Wextra -Wpedantic)
  set(CMAKE_POSITION_INDEPENDENT_CODE ON)
  # Enable parallel compilation for GCC/Clang
  include(ProcessorCount)
  ProcessorCount(N)
  if(NOT N EQUAL 0)
    set(CMAKE_BUILD_PARALLEL_LEVEL ${N})
  endif()
endif()

#--- Static Linking Configuration ---
set(BUILD_SHARED_LIBS OFF)
if(WIN32)
  set(CMAKE_FIND_LIBRARY_SUFFIXES .lib .a)
else()
  set(CMAKE_FIND_LIBRARY_SUFFIXES .a .so)
endif()

#--- Third-Party Directories ---
set(THIRDPARTY_DIR "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty")
set(EMSDK_DIR       "${THIRDPARTY_DIR}/emsdk")
set(QT_DIR          "${THIRDPARTY_DIR}/Qt")
set(PLATFORM_DIR    "${THIRDPARTY_DIR}/${PLATFORM_NAME}")

# Options for build configuration
option(LUPINE_ENABLE_EDITOR "Build the Qt-based editor" ON)
option(LUPINE_ENABLE_EXPORT "Enable cross-platform export functionality" ON)
option(LUPINE_ENABLE_RUNTIME_ONLY "Build only runtime (no editor dependencies)" OFF)

# Cross-compilation is always enabled
set(LUPINE_ENABLE_CROSS_COMPILATION ON CACHE BOOL "Enable cross-platform compilation" FORCE)

# Override editor option if runtime-only is requested
if(LUPINE_ENABLE_RUNTIME_ONLY)
  set(LUPINE_ENABLE_EDITOR OFF)
endif()

#--- vcpkg Integration ---
if(WIN32)
  set(VCPKG_DIR "${THIRDPARTY_DIR}/vcpkg")
  if(EXISTS "${VCPKG_DIR}/scripts/buildsystems/vcpkg.cmake")
    set(CMAKE_TOOLCHAIN_FILE "${VCPKG_DIR}/scripts/buildsystems/vcpkg.cmake" CACHE STRING "")
    set(VCPKG_TARGET_TRIPLET "${PLATFORM_TRIPLET}" CACHE STRING "")
    message(STATUS "Using vcpkg toolchain: ${CMAKE_TOOLCHAIN_FILE}")
  endif()
endif()

#--- Qt Configuration ---
if(LUPINE_ENABLE_EDITOR)
  # Platform-specific Qt paths
  if(WIN32)
    # Check for downloaded Qt first
    set(QT_DOWNLOADED_DIR "${QT_DIR}/6.9.1/msvc2022_64")
    set(QT_STATIC_DIR "${PLATFORM_DIR}/qtbase_x64-windows-static")

    if(EXISTS "${QT_DOWNLOADED_DIR}")
      # Use downloaded Qt 6.9.1
      set(Qt6_DIR "${QT_DOWNLOADED_DIR}/lib/cmake/Qt6")
      set(QT_HOST_PATH "${QT_DOWNLOADED_DIR}")
      set(QT_HOST_PATH_CMAKE_DIR "${QT_DOWNLOADED_DIR}/lib/cmake" CACHE PATH "Host Qt CMake directory")
      message(STATUS "Using downloaded Qt: ${QT_DOWNLOADED_DIR}")
    elseif(EXISTS "${QT_STATIC_DIR}")
      # Use precompiled static Qt
      set(Qt6_DIR "${QT_STATIC_DIR}/share/Qt6")
      set(QT_HOST_PATH "${QT_DIR}")
      set(QT_HOST_PATH_CMAKE_DIR "${QT_DIR}/share" CACHE PATH "Host Qt CMake directory")
      add_compile_definitions(QT_STATIC_BUILD)
      message(STATUS "Using static Qt: ${QT_STATIC_DIR}")
    else()
      # Fallback to vcpkg Qt
      set(Qt6_DIR "${VCPKG_DIR}/installed/${PLATFORM_TRIPLET}/share/Qt6")
      message(STATUS "Using vcpkg Qt: ${Qt6_DIR}")
    endif()
  elseif(APPLE)
    # Use Homebrew Qt
    if(CMAKE_OSX_ARCHITECTURES MATCHES "arm64")
      set(HOMEBREW_PREFIX "/opt/homebrew")
    else()
      set(HOMEBREW_PREFIX "/usr/local")
    endif()
    set(Qt6_DIR "${HOMEBREW_PREFIX}/opt/qt6/lib/cmake/Qt6")
    set(QT_HOST_PATH "${HOMEBREW_PREFIX}/opt/qt6")
  else()
    # Linux system Qt
    find_program(QMAKE_EXECUTABLE NAMES qmake6 qmake)
    if(QMAKE_EXECUTABLE)
      execute_process(COMMAND ${QMAKE_EXECUTABLE} -query QT_INSTALL_PREFIX
                      OUTPUT_VARIABLE QT_INSTALL_PREFIX
                      OUTPUT_STRIP_TRAILING_WHITESPACE)
      set(Qt6_DIR "${QT_INSTALL_PREFIX}/lib/cmake/Qt6")
      set(QT_HOST_PATH "${QT_INSTALL_PREFIX}")
    endif()
  endif()
endif()

#--- Library Search Paths ---
list(APPEND CMAKE_PREFIX_PATH
  ${EMSDK_DIR}
  ${QT_DIR}
  ${PLATFORM_DIR}
)

if(WIN32 AND EXISTS "${QT_STATIC_DIR}")
  list(APPEND CMAKE_PREFIX_PATH ${QT_STATIC_DIR})
endif()

# Add all platform-specific package directories efficiently
if(EXISTS "${PLATFORM_DIR}")
  file(GLOB PLATFORM_PACKAGES "${PLATFORM_DIR}/*")
  foreach(package IN LISTS PLATFORM_PACKAGES)
    if(IS_DIRECTORY "${package}")
      list(APPEND CMAKE_PREFIX_PATH "${package}")
      # Add lib and include directories if they exist
      if(EXISTS "${package}/lib")
        link_directories("${package}/lib")
      endif()
      if(EXISTS "${package}/include")
        include_directories("${package}/include")
      endif()
    endif()
  endforeach()
endif()

#--- Emscripten Support ---
option(BUILD_WEB_TEMPLATE "Build web export template" OFF)
if(BUILD_WEB_TEMPLATE)
  find_program(EMCC_EXECUTABLE emcc HINTS "${EMSDK_DIR}/bin" REQUIRED)
  set(CMAKE_C_COMPILER   ${EMCC_EXECUTABLE})
  set(CMAKE_CXX_COMPILER ${EMCC_EXECUTABLE})
  message(STATUS "Using Emscripten: ${EMCC_EXECUTABLE}")
endif()

#--- Debug Information ---
message(STATUS "=== Lupine Engine Build Configuration ===")
message(STATUS "Platform: ${PLATFORM_NAME}")
message(STATUS "Triplet: ${PLATFORM_TRIPLET}")
message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Editor Enabled: ${LUPINE_ENABLE_EDITOR}")
message(STATUS "Export Enabled: ${LUPINE_ENABLE_EXPORT}")
message(STATUS "Platform Directory: ${PLATFORM_DIR}")
message(STATUS "Third-party Directory: ${THIRDPARTY_DIR}")

#--- Qt Setup (if enabled) ---
if(LUPINE_ENABLE_EDITOR)
  message(STATUS "=== Qt6 Configuration ===")

  # Use the robust Qt6 finder
  find_and_configure_qt6(COMPONENTS Core Widgets Gui OpenGL OpenGLWidgets)

  if(NOT Qt6_FOUND)
    message(WARNING "[ERROR] Qt6 not found. Disabling editor build.")
    set(LUPINE_ENABLE_EDITOR OFF)
  else()
    message(STATUS "[OK] Qt6 configured successfully")
    message(STATUS "Found Qt6 components: ${Qt6_FOUND_COMPONENTS}")
    if(Qt6_MISSING_COMPONENTS)
      message(STATUS "Missing Qt6 components: ${Qt6_MISSING_COMPONENTS}")
    endif()
  endif()
else()
  message(STATUS "Qt editor disabled - building runtime only")
endif()

#--- Include Directories ---
set(ENGINE_INCLUDE_DIRS
  "${CMAKE_CURRENT_SOURCE_DIR}/include"
)

# Add Emscripten includes if available
if(EXISTS "${EMSDK_DIR}/include")
  list(APPEND ENGINE_INCLUDE_DIRS "${EMSDK_DIR}/include")
endif()

# Add Qt includes if editor is enabled
if(LUPINE_ENABLE_EDITOR AND EXISTS "${QT_DIR}/include")
  list(APPEND ENGINE_INCLUDE_DIRS "${QT_DIR}/include")
endif()

# Add platform-specific includes from packages
if(EXISTS "${PLATFORM_DIR}")
  file(GLOB PLATFORM_PACKAGES "${PLATFORM_DIR}/*")
  foreach(package IN LISTS PLATFORM_PACKAGES)
    if(IS_DIRECTORY "${package}")
      if(EXISTS "${package}/include")
        list(APPEND ENGINE_INCLUDE_DIRS "${package}/include")

        # Add SDL2 specific includes
        if(EXISTS "${package}/include/SDL2")
          list(APPEND ENGINE_INCLUDE_DIRS "${package}/include/SDL2")
        endif()

        # Add Python specific includes
        file(GLOB PYTHON_INCLUDES "${package}/include/python*")
        foreach(python_inc IN LISTS PYTHON_INCLUDES)
          if(IS_DIRECTORY "${python_inc}")
            list(APPEND ENGINE_INCLUDE_DIRS "${python_inc}")
          endif()
        endforeach()
      endif()
    endif()
  endforeach()
endif()

# Add common third-party includes
set(COMMON_INCLUDES
  "${THIRDPARTY_DIR}/glad/include"
  "${THIRDPARTY_DIR}/stb"
  "${THIRDPARTY_DIR}/box2d/include"
)

foreach(inc_dir IN LISTS COMMON_INCLUDES)
  if(EXISTS "${inc_dir}")
    list(APPEND ENGINE_INCLUDE_DIRS "${inc_dir}")
  endif()
endforeach()

# Set global include directories
include_directories(${ENGINE_INCLUDE_DIRS})

message(STATUS "Include directories configured:")
foreach(inc_dir IN LISTS ENGINE_INCLUDE_DIRS)
  message(STATUS "  ${inc_dir}")
endforeach()

#--- Engine Sources & Headers ---
file(GLOB_RECURSE ENGINE_SOURCES
  "src/animation/*.cpp"
  "src/audio/*.cpp"
  "src/components/*.cpp"
  "src/core/*.cpp"
  "src/export/*.cpp"
  "src/input/*.cpp"
  "src/localization/*.cpp"
  "src/nodes/*.cpp"
  "src/physics/*.cpp"
  "src/rendering/*.cpp"
  "src/resources/*.cpp"
  "src/scriptableobjects/*.cpp"
  "src/scripting/*.cpp"
  "src/serialization/*.cpp"
  "src/terrain/*.cpp"
  "src/tilemap/*.cpp"
  "src/visualscripting/*.cpp"
)

# Add GLAD source - check if we need to compile it or if it's already a library
set(GLAD_SOURCE_ADDED FALSE)
if(WIN32 AND EXISTS "${PLATFORM_DIR}/glad_x64-windows-static/lib/glad.lib")
  # Use precompiled GLAD library on Windows
  set(GLAD_LIBRARY "${PLATFORM_DIR}/glad_x64-windows-static/lib/glad.lib")
  set(GLAD_SOURCE_ADDED TRUE)
elseif(EXISTS "${THIRDPARTY_DIR}/glad/src/glad.c")
  # Use source file if available
  list(APPEND ENGINE_SOURCES "${THIRDPARTY_DIR}/glad/src/glad.c")
  set(GLAD_SOURCE_ADDED TRUE)
endif()

if(NOT GLAD_SOURCE_ADDED)
  message(WARNING "GLAD source or library not found. OpenGL loading may not work.")
endif()

file(GLOB_RECURSE ENGINE_HEADERS
  "include/lupine/*.h"
  "src/*/*.h"
)

#--- Engine Library ---
add_library(LupineEngine STATIC ${ENGINE_SOURCES} ${ENGINE_HEADERS})

#--- Find Required Libraries ---
message(STATUS "=== Library Configuration ===")

# Add our custom CMake modules to the path
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

# Add package share directories to CMAKE_MODULE_PATH for Find modules
if(EXISTS "${PLATFORM_DIR}")
  file(GLOB PLATFORM_PACKAGES "${PLATFORM_DIR}/*")
  foreach(package IN LISTS PLATFORM_PACKAGES)
    if(IS_DIRECTORY "${package}")
      # Add share directories that might contain Find modules
      if(EXISTS "${package}/share")
        file(GLOB SHARE_SUBDIRS "${package}/share/*")
        foreach(share_subdir IN LISTS SHARE_SUBDIRS)
          if(IS_DIRECTORY "${share_subdir}")
            list(APPEND CMAKE_MODULE_PATH "${share_subdir}")
          endif()
        endforeach()
      endif()
    endif()
  endforeach()
endif()

# Modern CMake approach using vcpkg targets
set(ENGINE_LIBRARIES)

# SDL2 Libraries
find_package(SDL2 CONFIG REQUIRED)
list(APPEND ENGINE_LIBRARIES SDL2::SDL2-static)
set(SDL2_MAIN_LIBRARY SDL2::SDL2main)  # Separate SDL2main for runtime only
message(STATUS "Found SDL2")

find_package(SDL2_image CONFIG REQUIRED)
list(APPEND ENGINE_LIBRARIES SDL2_image::SDL2_image-static)
message(STATUS "Found SDL2_image")

find_package(SDL2_ttf CONFIG REQUIRED)
list(APPEND ENGINE_LIBRARIES SDL2_ttf::SDL2_ttf-static)
message(STATUS "Found SDL2_ttf")

find_package(SDL2_mixer CONFIG REQUIRED)
list(APPEND ENGINE_LIBRARIES SDL2_mixer::SDL2_mixer-static)
message(STATUS "Found SDL2_mixer")

# Graphics Libraries
find_package(glad CONFIG REQUIRED)
list(APPEND ENGINE_LIBRARIES glad::glad)
message(STATUS "Found glad")

find_package(glm CONFIG REQUIRED)
target_link_libraries(LupineEngine PRIVATE glm::glm)
message(STATUS "Found glm")

# Physics Libraries
find_package(Bullet CONFIG REQUIRED)
list(APPEND ENGINE_LIBRARIES ${BULLET_LIBRARIES})
message(STATUS "Found Bullet Physics")

find_package(box2d CONFIG REQUIRED)
list(APPEND ENGINE_LIBRARIES box2d::box2d)
message(STATUS "Found Box2D")

# Audio Libraries
find_package(Vorbis CONFIG REQUIRED)
list(APPEND ENGINE_LIBRARIES Vorbis::vorbis Vorbis::vorbisfile)
message(STATUS "Found Vorbis")

find_package(FLAC CONFIG REQUIRED)
list(APPEND ENGINE_LIBRARIES FLAC::FLAC)
message(STATUS "Found FLAC")



# Utility Libraries
find_package(yaml-cpp CONFIG REQUIRED)
list(APPEND ENGINE_LIBRARIES yaml-cpp::yaml-cpp)
message(STATUS "Found yaml-cpp")

find_package(spdlog CONFIG REQUIRED)
list(APPEND ENGINE_LIBRARIES spdlog::spdlog)
message(STATUS "Found spdlog")

find_package(pugixml CONFIG REQUIRED)
list(APPEND ENGINE_LIBRARIES pugixml::pugixml)
message(STATUS "Found pugixml")

find_package(nlohmann_json CONFIG REQUIRED)
target_link_libraries(LupineEngine PRIVATE nlohmann_json::nlohmann_json)
message(STATUS "Found nlohmann_json")

# 3D Model Libraries
find_package(assimp CONFIG REQUIRED)
list(APPEND ENGINE_LIBRARIES assimp::assimp)
message(STATUS "Found assimp")

# Scripting Libraries
find_package(unofficial-lua CONFIG REQUIRED)
list(APPEND ENGINE_LIBRARIES lua)
message(STATUS "Found Lua")

# Python and pybind11 for Python scripting support
# Set Python hints for our thirdparty installation
if(WIN32)
  # Use static Python for libraries and regular Python for interpreter
  set(PYTHON_STATIC_DIR "${PLATFORM_DIR}/python3_x64-windows-static")
  set(PYTHON_REGULAR_DIR "${PLATFORM_DIR}/python3_x64-windows")

  # Set Python executable path
  set(Python3_EXECUTABLE "${PYTHON_REGULAR_DIR}/tools/python3/python.exe")

  # Set Python development paths (prefer static for linking)
  if(EXISTS "${PYTHON_STATIC_DIR}")
    set(Python3_INCLUDE_DIR "${PYTHON_STATIC_DIR}/include/python3.12")
    set(Python3_LIBRARY "${PYTHON_STATIC_DIR}/lib/python312.lib")
    set(Python3_ROOT_DIR "${PYTHON_STATIC_DIR}")
    # Define static linking for Python
    add_definitions(-DPy_NO_ENABLE_SHARED)
  else()
    set(Python3_INCLUDE_DIR "${PYTHON_REGULAR_DIR}/include/python3.12")
    set(Python3_LIBRARY "${PYTHON_REGULAR_DIR}/lib/python312.lib")
    set(Python3_ROOT_DIR "${PYTHON_REGULAR_DIR}")
  endif()

  message(STATUS "Python3 configuration:")
  message(STATUS "  Executable: ${Python3_EXECUTABLE}")
  message(STATUS "  Include dir: ${Python3_INCLUDE_DIR}")
  message(STATUS "  Library: ${Python3_LIBRARY}")
  message(STATUS "  Root dir: ${Python3_ROOT_DIR}")
endif()

find_package(Python3 COMPONENTS Interpreter Development REQUIRED)
find_package(pybind11 CONFIG REQUIRED)

# Add additional Windows libraries required for static Python linking
if(WIN32)
  list(APPEND ENGINE_LIBRARIES Python3::Python pybind11::headers)
  # Add Windows system libraries required for static Python
  list(APPEND ENGINE_LIBRARIES ws2_32 shell32 user32 advapi32 ole32 oleaut32 uuid)
else()
  list(APPEND ENGINE_LIBRARIES Python3::Python pybind11::headers)
endif()

message(STATUS "Found Python3: ${Python3_VERSION}")
message(STATUS "Found pybind11: ${pybind11_VERSION}")

# Additional dependencies for static linking
if(WIN32)
    # Add bzip2 library for FreeType dependency
    find_library(BZIP2_LIB NAMES bz2 PATHS "${PLATFORM_DIR}/bzip2_x64-windows-static/lib" NO_DEFAULT_PATH)
    if(BZIP2_LIB)
        list(APPEND ENGINE_LIBRARIES ${BZIP2_LIB})
        message(STATUS "Found BZip2: ${BZIP2_LIB}")

        # Add library directory to linker search path
        target_link_directories(LupineEngine PRIVATE "${PLATFORM_DIR}/bzip2_x64-windows-static/lib")
    endif()

    # Add libsndfile library and its dependencies
    find_library(SNDFILE_LIB NAMES sndfile PATHS "${PLATFORM_DIR}/libsndfile_x64-windows-static/lib" NO_DEFAULT_PATH)
    if(SNDFILE_LIB)
        list(APPEND ENGINE_LIBRARIES ${SNDFILE_LIB})
        message(STATUS "Found libsndfile: ${SNDFILE_LIB}")

        # Add library directory to linker search path
        target_link_directories(LupineEngine PRIVATE "${PLATFORM_DIR}/libsndfile_x64-windows-static/lib")
    endif()

    # Add libsndfile dependencies
    find_library(OPUS_LIB NAMES opus PATHS "${PLATFORM_DIR}/opus_x64-windows-static/lib" NO_DEFAULT_PATH)
    if(OPUS_LIB)
        list(APPEND ENGINE_LIBRARIES ${OPUS_LIB})
        message(STATUS "Found opus: ${OPUS_LIB}")
        target_link_directories(LupineEngine PRIVATE "${PLATFORM_DIR}/opus_x64-windows-static/lib")
    endif()

    find_library(MPG123_LIB NAMES mpg123 PATHS "${PLATFORM_DIR}/mpg123_x64-windows-static/lib" NO_DEFAULT_PATH)
    if(MPG123_LIB)
        list(APPEND ENGINE_LIBRARIES ${MPG123_LIB})
        message(STATUS "Found mpg123: ${MPG123_LIB}")
        target_link_directories(LupineEngine PRIVATE "${PLATFORM_DIR}/mpg123_x64-windows-static/lib")
    endif()

    find_library(MP3LAME_LIB NAMES libmp3lame-static PATHS "${PLATFORM_DIR}/mp3lame_x64-windows-static/lib" NO_DEFAULT_PATH)
    if(MP3LAME_LIB)
        list(APPEND ENGINE_LIBRARIES ${MP3LAME_LIB})
        message(STATUS "Found mp3lame: ${MP3LAME_LIB}")
        target_link_directories(LupineEngine PRIVATE "${PLATFORM_DIR}/mp3lame_x64-windows-static/lib")
    endif()

    find_library(MPGHIP_LIB NAMES libmpghip-static PATHS "${PLATFORM_DIR}/mp3lame_x64-windows-static/lib" NO_DEFAULT_PATH)
    if(MPGHIP_LIB)
        list(APPEND ENGINE_LIBRARIES ${MPGHIP_LIB})
        message(STATUS "Found mpghip: ${MPGHIP_LIB}")
    endif()
endif()

# Use the collected libraries
set(ENGINE_LIBRARIES ${ENGINE_LIBRARIES})

list(LENGTH ENGINE_LIBRARIES lib_count)
message(STATUS "Found ${lib_count} engine libraries")

#--- Link Engine Dependencies ---
target_link_libraries(LupineEngine PRIVATE ${ENGINE_LIBRARIES})

# Add Python include directories
if(Python3_FOUND)
  target_include_directories(LupineEngine PRIVATE ${Python3_INCLUDE_DIRS})
  target_compile_definitions(LupineEngine PRIVATE
    LUPINE_PYTHON_SUPPORT=1
    PYBIND11_DETAILED_ERROR_MESSAGES
  )
endif()

# Add Qt libraries if editor is enabled
if(LUPINE_ENABLE_EDITOR AND Qt6_FOUND)
  target_link_libraries(LupineEngine PRIVATE
    Qt6::Core Qt6::Widgets Qt6::Gui Qt6::OpenGL Qt6::OpenGLWidgets
  )

  # For static Qt builds on Windows
  if(WIN32 AND QT_STATIC_DIR)
    if(TARGET Qt6::EntryPoint)
      target_link_libraries(LupineEngine PRIVATE Qt6::EntryPoint)
    endif()

    # Windows system libraries for static Qt
    target_link_libraries(LupineEngine PRIVATE
      dwmapi uxtheme winmm imm32 wtsapi32 setupapi version
      netapi32 userenv crypt32 secur32 bcrypt
    )
  endif()
endif()

#--- Platform System Libraries ---
if(WIN32)
  target_link_libraries(LupineEngine PRIVATE
    user32 gdi32 shell32 advapi32 kernel32 ws2_32 opengl32
  )

  # Additional Windows libraries for Python static linking
  if(Python3_FOUND)
    target_link_libraries(LupineEngine PRIVATE
      # Python requires these Windows libraries for static linking
      pathcch shlwapi bcrypt
    )
  endif()
elseif(APPLE)
  # macOS frameworks
  find_library(COCOA_FRAMEWORK Cocoa REQUIRED)
  find_library(IOKIT_FRAMEWORK IOKit REQUIRED)
  find_library(OPENGL_FRAMEWORK OpenGL REQUIRED)
  find_library(COREAUDIO_FRAMEWORK CoreAudio REQUIRED)
  find_library(AUDIOTOOLBOX_FRAMEWORK AudioToolbox REQUIRED)

  target_link_libraries(LupineEngine PRIVATE
    ${COCOA_FRAMEWORK} ${IOKIT_FRAMEWORK} ${OPENGL_FRAMEWORK}
    ${COREAUDIO_FRAMEWORK} ${AUDIOTOOLBOX_FRAMEWORK}
  )
elseif(UNIX)
  # Linux system libraries
  find_package(Threads REQUIRED)
  find_package(X11 REQUIRED)

  target_link_libraries(LupineEngine PRIVATE
    Threads::Threads ${CMAKE_DL_LIBS} ${X11_LIBRARIES}
  )

  # Audio libraries
  find_library(ASOUND_LIBRARY asound)
  if(ASOUND_LIBRARY)
    target_link_libraries(LupineEngine PRIVATE ${ASOUND_LIBRARY})
  endif()
endif()

#--- Platform-specific Compile Definitions ---
target_compile_definitions(LupineEngine PRIVATE
  LUPINE_EMBED_WINDOWS_LIBRARIES
  LUPINE_EMBED_LINUX_LIBRARIES
  LUPINE_EMBED_MACOS_LIBRARIES
  LUPINE_EMBED_ARM64_LIBRARIES
)

# Add platform-specific definitions
if(WIN32)
  target_compile_definitions(LupineEngine PRIVATE
    WIN32_LEAN_AND_MEAN
    NOMINMAX
    UNICODE
    _UNICODE
    # OpenGL extensions
    GL_GLEXT_PROTOTYPES
  )
  # For static Qt builds
  if(QT_STATIC_DIR)
    target_compile_definitions(LupineEngine PRIVATE QT_STATIC_BUILD)
  endif()
endif()

#--- Runtime Executable ---
add_executable(lupine-runtime "src/runtime/main.cpp")
if(WIN32)
  target_sources(lupine-runtime PRIVATE "src/runtime/resources/lupine-runtime.rc")
endif()

target_link_libraries(lupine-runtime PRIVATE LupineEngine ${SDL2_MAIN_LIBRARY})
set_target_properties(lupine-runtime PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")

# Add library directories for runtime target
if(WIN32 AND BZIP2_LIB)
    target_link_directories(lupine-runtime PRIVATE "${PLATFORM_DIR}/bzip2_x64-windows-static/lib")
endif()
if(WIN32 AND SNDFILE_LIB)
    target_link_directories(lupine-runtime PRIVATE "${PLATFORM_DIR}/libsndfile_x64-windows-static/lib")
endif()
if(WIN32 AND OPUS_LIB)
    target_link_directories(lupine-runtime PRIVATE "${PLATFORM_DIR}/opus_x64-windows-static/lib")
endif()
if(WIN32 AND MPG123_LIB)
    target_link_directories(lupine-runtime PRIVATE "${PLATFORM_DIR}/mpg123_x64-windows-static/lib")
endif()
if(WIN32 AND MP3LAME_LIB)
    target_link_directories(lupine-runtime PRIVATE "${PLATFORM_DIR}/mp3lame_x64-windows-static/lib")
endif()

#--- Qt Editor Executable ---
if(LUPINE_ENABLE_EDITOR AND Qt6_FOUND)
  message(STATUS "=== Building Qt Editor ===")

  # Enable Qt automation
  set(CMAKE_AUTOMOC ON)
  set(CMAKE_AUTOUIC ON)
  set(CMAKE_AUTORCC ON)

  # Collect editor sources
  file(GLOB_RECURSE EDITOR_SOURCES "src/editor/*.cpp")
  file(GLOB_RECURSE EDITOR_HEADERS "src/editor/*.h" "include/lupine/editor/*.h")

  # Editor resources
  set(EDITOR_RESOURCES)
  if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/src/editor/resources/editor.qrc")
    list(APPEND EDITOR_RESOURCES "src/editor/resources/editor.qrc")
  endif()

  if(WIN32 AND EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/src/editor/resources/lupine-editor.rc")
    list(APPEND EDITOR_RESOURCES "src/editor/resources/lupine-editor.rc")
  endif()

  # Create editor executable
  add_executable(lupine-editor ${EDITOR_SOURCES} ${EDITOR_HEADERS} ${EDITOR_RESOURCES})

  # Link libraries
  target_link_libraries(lupine-editor PRIVATE
    LupineEngine
    ${ENGINE_LIBRARIES}
  )

  # Link Qt6 components that were found
  foreach(component IN LISTS Qt6_FOUND_COMPONENTS)
    if(TARGET Qt6::${component})
      target_link_libraries(lupine-editor PRIVATE Qt6::${component})
      message(STATUS "Linking Qt6::${component} to editor")
    endif()
  endforeach()

  # Ensure essential Qt components are linked
  set(REQUIRED_QT_COMPONENTS Core Widgets Gui)
  foreach(component IN LISTS REQUIRED_QT_COMPONENTS)
    if(TARGET Qt6::${component})
      target_link_libraries(lupine-editor PRIVATE Qt6::${component})
    else()
      message(FATAL_ERROR "Required Qt6 component Qt6::${component} not found")
    endif()
  endforeach()

  # Link optional Qt components if available
  set(OPTIONAL_QT_COMPONENTS OpenGL OpenGLWidgets)
  foreach(component IN LISTS OPTIONAL_QT_COMPONENTS)
    if(TARGET Qt6::${component})
      target_link_libraries(lupine-editor PRIVATE Qt6::${component})
      message(STATUS "Linking optional Qt6::${component} to editor")
    else()
      message(STATUS "Optional Qt6::${component} not available")
    endif()
  endforeach()

  # Platform-specific editor linking using robust Qt configuration
  if(WIN32)
    # Use the robust Qt static linking configuration
    configure_qt6_static_linking(lupine-editor)
  endif()

  # Set editor properties
  set_target_properties(lupine-editor PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
    WIN32_EXECUTABLE TRUE
    MACOSX_BUNDLE TRUE
  )

  # Add library directories for editor target
  if(WIN32 AND BZIP2_LIB)
      target_link_directories(lupine-editor PRIVATE "${PLATFORM_DIR}/bzip2_x64-windows-static/lib")
  endif()
  if(WIN32 AND SNDFILE_LIB)
      target_link_directories(lupine-editor PRIVATE "${PLATFORM_DIR}/libsndfile_x64-windows-static/lib")
  endif()
  if(WIN32 AND OPUS_LIB)
      target_link_directories(lupine-editor PRIVATE "${PLATFORM_DIR}/opus_x64-windows-static/lib")
  endif()
  if(WIN32 AND MPG123_LIB)
      target_link_directories(lupine-editor PRIVATE "${PLATFORM_DIR}/mpg123_x64-windows-static/lib")
  endif()
  if(WIN32 AND MP3LAME_LIB)
      target_link_directories(lupine-editor PRIVATE "${PLATFORM_DIR}/mp3lame_x64-windows-static/lib")
  endif()

  message(STATUS "Editor executable configured")
else()
  message(STATUS "Editor build disabled or Qt not found")
endif()

#--- Web Export Template ---
if(BUILD_WEB_TEMPLATE)
  add_executable(lupine-web-template
    "src/export/web/WebRuntimeMain.cpp"
    "src/export/web/WebScriptBridge.cpp"
    ${ENGINE_SOURCES}
  )
  target_compile_definitions(lupine-web-template PRIVATE LUPINE_WEB_BUILD=1 LUPINE_PLATFORM_WEB=1)
  set_target_properties(lupine-web-template PROPERTIES
    LINK_FLAGS "-s USE_SDL=2 -s USE_SDL_IMAGE=2 -s USE_SDL_TTF=2 -s WASM=1 -s ALLOW_MEMORY_GROWTH=1"
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/web"
  )
endif()

#--- Cross-Compilation Setup ---
if(LUPINE_ENABLE_CROSS_COMPILATION)
  message(STATUS "=== Cross-Compilation Configuration ===")

  # Define all target platforms
  set(CROSS_COMPILE_PLATFORMS "Windows;Linux;Mac-OSX;Mac-ARM64")

  # Check which platforms have libraries available
  set(AVAILABLE_PLATFORMS)
  foreach(platform IN LISTS CROSS_COMPILE_PLATFORMS)
    set(platform_lib_dir "${THIRDPARTY_DIR}/${platform}/lib")
    if(EXISTS "${platform_lib_dir}")
      list(APPEND AVAILABLE_PLATFORMS ${platform})
      message(STATUS "[OK] ${platform} libraries available")
    else()
      message(STATUS "[WARN] ${platform} libraries missing")
    endif()
  endforeach()

  if(AVAILABLE_PLATFORMS)
    message(STATUS "Cross-compilation enabled for: ${AVAILABLE_PLATFORMS}")

    # Add compile definitions for available platforms
    target_compile_definitions(LupineEngine PRIVATE
      LUPINE_ENABLE_CROSS_COMPILATION
    )

    foreach(platform IN LISTS AVAILABLE_PLATFORMS)
      string(TOUPPER ${platform} platform_upper)
      string(REPLACE "-" "_" platform_define ${platform_upper})
      target_compile_definitions(LupineEngine PRIVATE
        "LUPINE_EMBED_${platform_define}_LIBRARIES"
      )
    endforeach()

    # Create cross-compilation info header
    set(CROSS_COMPILE_HEADER "${CMAKE_BINARY_DIR}/include/lupine/cross_compile_info.h")
    file(WRITE ${CROSS_COMPILE_HEADER}
      "// Auto-generated cross-compilation information\n"
      "#pragma once\n\n"
      "#define LUPINE_CROSS_COMPILE_ENABLED 1\n"
    )

    foreach(platform IN LISTS AVAILABLE_PLATFORMS)
      string(TOUPPER ${platform} platform_upper)
      string(REPLACE "-" "_" platform_define ${platform_upper})
      file(APPEND ${CROSS_COMPILE_HEADER}
        "#define LUPINE_HAS_${platform_define}_LIBS 1\n"
      )
    endforeach()

    # Add the generated include directory
    target_include_directories(LupineEngine PRIVATE "${CMAKE_BINARY_DIR}/include")

  else()
    message(WARNING "No cross-compilation libraries found. Run setup script to download them.")
  endif()
endif()

#--- Output Directories ---
set(ALL_TARGETS LupineEngine lupine-runtime)

if(LUPINE_ENABLE_EDITOR AND Qt6_FOUND)
  list(APPEND ALL_TARGETS lupine-editor)
endif()

if(BUILD_WEB_TEMPLATE)
  list(APPEND ALL_TARGETS lupine-web-template)
endif()

# Set output directories for all targets
foreach(target IN LISTS ALL_TARGETS)
  if(TARGET ${target})
    set_target_properties(${target} PROPERTIES
      ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib"
      LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib"
      RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
    )
  endif()
endforeach()

#--- Build Summary ---
message(STATUS "=== Build Summary ===")
message(STATUS "Targets to build:")
foreach(target IN LISTS ALL_TARGETS)
  if(TARGET ${target})
    message(STATUS "  ✓ ${target}")
  else()
    message(STATUS "  ✗ ${target} (disabled)")
  endif()
endforeach()

message(STATUS "Output directories:")
message(STATUS "  Executables: ${CMAKE_BINARY_DIR}/bin")
message(STATUS "  Libraries: ${CMAKE_BINARY_DIR}/lib")
message(STATUS "=== Configuration Complete ===")

# Create a custom target for easy building
add_custom_target(lupine-all
  DEPENDS ${ALL_TARGETS}
  COMMENT "Building all Lupine Engine targets"
)
